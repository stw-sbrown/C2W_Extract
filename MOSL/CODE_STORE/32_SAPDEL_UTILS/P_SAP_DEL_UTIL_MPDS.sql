create or replace
PROCEDURE P_SAP_DEL_UTIL_MPDS AS
----------------------------------------------------------------------------------------
-- PROCEDURE SPECIFICATION: MPDS Data File Utility
--
-- AUTHOR         : Kevin Burton
--
-- FILENAME       : P_SAP_DEL_UTIL_MPDS.sql
--
-- Subversion $Revision: 6313 $
--
-- CREATED        : 15/09/2016
--
-- DESCRIPTION    : Utility proc to create CSV files of MPDS data settlements
-- NOTES  :
-- This package must be run each time the delivery batch is run.
---------------------------- Modification History ---------------------------------------
--
-- Version     Date        Author     Description
-- ---------   ----------  -------    ---------------------------------------------------
-- V 0.01      15/09/2016  K.Burton   Initial Draft
-- V 0.02      13/10/2016  K.Burton   Updates from CnC feedback
-- V 0.03      21/11/2016  K.Burton   Change to METER_INFO file ETD
-----------------------------------------------------------------------------------------
  l_text VARCHAR2(2000);
  l_rows_written VARCHAR2(10);
  l_delimiter VARCHAR2(1) := ',';
  l_filehandle UTL_FILE.FILE_TYPE;
  l_filepath VARCHAR2(30) := 'SAPDELEXPORT';
  l_filename VARCHAR2(200);
  l_timestamp VARCHAR2(20);

-- SPID
  CURSOR spid_cur IS
    SELECT MSP.SPID_PK SPID,
           TO_CHAR(MSP.SUPPLYPOINTEFFECTIVEFROMDATE,'YYYY-MM-DD') CONNDATE
    FROM SAPTRAN.MO_SUPPLY_POINT MSP,
         SAPTRAN.MO_ELIGIBLE_PREMISES MEP
    WHERE MSP.STWPROPERTYNUMBER_PK = MEP.STWPROPERTYNUMBER_PK
    AND NOT (MSP.WHOLESALERID_PK <> 'SEVERN-W' AND MSP.SERVICECATEGORY = 'S')
    ORDER BY MSP.SPID_PK;

-- SPID_REG
  CURSOR spid_reg_cur IS
    SELECT MSP.SPID_PK SPID,
           TO_CHAR(NVL(MSP.REGISTRATIONSTARTDATE,MSP.SUPPLYPOINTEFFECTIVEFROMDATE),'YYYY-MM-DD') REGD,
           MSP.WHOLESALERID_PK WID,
           MSP.RETAILERID_PK RID
    FROM SAPTRAN.MO_SUPPLY_POINT MSP,
         SAPTRAN.MO_ELIGIBLE_PREMISES MEP
    WHERE MSP.STWPROPERTYNUMBER_PK = MEP.STWPROPERTYNUMBER_PK
    AND NOT (MSP.WHOLESALERID_PK <> 'SEVERN-W' AND MSP.SERVICECATEGORY = 'S')
    ORDER BY MSP.SPID_PK;

-- SPID_HIST
  CURSOR spid_hist_cur IS
    SELECT MSP.SPID_PK SPID,
           TO_CHAR(MSP.SUPPLYPOINTEFFECTIVEFROMDATE,'YYYY-MM-DD') EFD,
           DECODE(MSP.DISCONRECONDEREGSTATUS,'REC','TRAD',MSP.DISCONRECONDEREGSTATUS) STATUS,
           MEP.RATEABLEVALUE RV,
           DECODE(MEP.OCCUPENCYSTATUS,'OCCUPIED',0,1) VAC,
           MEP.SECTION154 SEC154A,
           MSP.VOLTRANSFERFLAG VOLTRANSFER
    FROM SAPTRAN.MO_SUPPLY_POINT MSP,
         SAPTRAN.MO_ELIGIBLE_PREMISES MEP
    WHERE MSP.STWPROPERTYNUMBER_PK = MEP.STWPROPERTYNUMBER_PK
    AND NOT (MSP.WHOLESALERID_PK <> 'SEVERN-W' AND MSP.SERVICECATEGORY = 'S')
    ORDER BY MSP.SPID_PK;

-- WSC_HIST
  CURSOR wsc_hist_cur IS
    SELECT MSP.SPID_PK SPID,
           TO_CHAR(MSP.SUPPLYPOINTEFFECTIVEFROMDATE,'YYYY-MM-DD') EFD,
           MPW.SERVICECOMPONENTENABLED MWEN_P,
           MPW.TARIFFCODE_PK MWTAR_P,
           MPW.SPECIALAGREEMENTFACTOR MWSAF_P,
           MPW.SPECIALAGREEMENTFLAG MWSAEX_P,
           MPW.METEREDPWMAXDAILYDEMAND MWMDD_P,
           MPW.DAILYRESERVEDCAPACITY MWDCAP_P,
           MNPW.SERVICECOMPONENTENABLED MWEN_NP,
           MNPW.TARIFFCODE_PK MWTAR_NP,
           MNPW.SPECIALAGREEMENTFACTOR MWSAF_NP,
           MNPW.SPECIALAGREEMENTFLAG MWSAEX_NP,
           MNPW.METEREDPWMAXDAILYDEMAND MWMDD_NP,
           MNPW.DAILYRESERVEDCAPACITY MWDCAP_NP,
           AW.SERVICECOMPONENTENABLED AWEN,
           AW.TARIFFCODE_PK AWTAR,
           AW.SPECIALAGREEMENTFACTOR AWSAF,
           AW.SPECIALAGREEMENTFLAG AWSAEX,
           AW.ASSESSEDDVOLUMETRICRATE AWVRATE,
           AW.ASSESSEDCHARGEMETERSIZE AWMS,
           AW.ASSESSEDTARIFBAND AWBAND,
           UW.SERVICECOMPONENTENABLED UWEN,
           UW.TARIFFCODE_PK UWTAR,
           UW.SPECIALAGREEMENTFACTOR UWSAF,
           UW.SPECIALAGREEMENTFLAG UWSAEX,
           UW.UNMEASUREDTYPEACOUNT UWMISC_A,
           UW.UNMEASUREDTYPEBCOUNT UWMISC_B,
           UW.UNMEASUREDTYPECCOUNT UWMISC_C,
           UW.UNMEASUREDTYPEDCOUNT UWMISC_D,
           UW.UNMEASUREDTYPEECOUNT UWMISC_E,
           UW.UNMEASUREDTYPEFCOUNT UWMISC_F,
           UW.UNMEASUREDTYPEGCOUNT UWMISC_G,
           UW.UNMEASUREDTYPEHCOUNT UWMISC_H,
           MSC.PIPESIZE PS,
           DECODE(NVL(ADJ.SERVICECOMPONENTREF_PK,0),0,0,1) WCAEN,
           ADJ.ADJUSTMENTSCHARGEADJTARIFFCODE WCATAR
    FROM SAPTRAN.MO_SUPPLY_POINT MSP,
         SAPTRAN.MO_ELIGIBLE_PREMISES MEP,
         SAPTRAN.MO_SERVICE_COMPONENT MSC,
         SAPTRAN.MO_SERVICE_COMPONENT MPW,
         SAPTRAN.MO_SERVICE_COMPONENT MNPW,
         SAPTRAN.MO_SERVICE_COMPONENT AW,
         SAPTRAN.MO_SERVICE_COMPONENT UW,
         SAPTRAN.MO_SERVICE_COMPONENT_VOL_ADJ ADJ
    WHERE MSP.STWPROPERTYNUMBER_PK = MEP.STWPROPERTYNUMBER_PK
    AND MSP.WHOLESALERID_PK = 'SEVERN-W'
    AND MSP.SERVICECATEGORY = 'W'
    AND MSP.SPID_PK = MSC.SPID_PK
    AND (MSP.SPID_PK = MPW.SPID_PK(+) AND MPW.SERVICECOMPONENTTYPE(+) = 'MPW')
    AND (MSP.SPID_PK = MNPW.SPID_PK(+) AND MNPW.SERVICECOMPONENTTYPE(+) = 'MNPW')
    AND (MSP.SPID_PK = AW.SPID_PK(+) AND AW.SERVICECOMPONENTTYPE(+) = 'AW')
    AND (MSP.SPID_PK = UW.SPID_PK(+) AND UW.SERVICECOMPONENTTYPE(+) = 'UW')
    AND MSC.SERVICECOMPONENTREF_PK = ADJ.SERVICECOMPONENTREF_PK(+)
    ORDER BY MSP.SPID_PK;

-- SSC_HIST
  CURSOR ssc_hist_cur IS
    SELECT * FROM
      (SELECT MSP.SPID_PK SPID,
             TO_CHAR(MSP.SUPPLYPOINTEFFECTIVEFROMDATE,'YYYY-MM-DD') EFD,
             MS.SERVICECOMPONENTENABLED MSEN,
             MS.TARIFFCODE_PK MSTAR,
             MS.SPECIALAGREEMENTFACTOR MSSAF,
             MS.SPECIALAGREEMENTFLAG MSSAEX,
             ASS.SERVICECOMPONENTENABLED ASEN,
             ASS.TARIFFCODE_PK ASTAR,
             ASS.SPECIALAGREEMENTFACTOR ASSAF,
             ASS.SPECIALAGREEMENTFLAG ASSAEX,
             ASS.ASSESSEDDVOLUMETRICRATE ASVRATE,
             ASS.ASSESSEDCHARGEMETERSIZE ASMS,
             ASS.ASSESSEDTARIFBAND ASBAND,
             US.SERVICECOMPONENTENABLED USEN,
             US.TARIFFCODE_PK USTAR,
             US.SPECIALAGREEMENTFACTOR USSAF,
             US.SPECIALAGREEMENTFLAG USSAEX,
             US.UNMEASUREDTYPEACOUNT USMISC_A,
             US.UNMEASUREDTYPEBCOUNT USMISC_B,
             US.UNMEASUREDTYPECCOUNT USMISC_C,
             US.UNMEASUREDTYPEDCOUNT USMISC_D,
             US.UNMEASUREDTYPEECOUNT USMISC_E,
             US.UNMEASUREDTYPEFCOUNT USMISC_F,
             US.UNMEASUREDTYPEGCOUNT USMISC_G,
             US.UNMEASUREDTYPEHCOUNT USMISC_H,
             MSC.PIPESIZE PS,
             DECODE(NVL(ADJ.SERVICECOMPONENTREF_PK,0),0,0,1) SCAEN,
             ADJ.ADJUSTMENTSCHARGEADJTARIFFCODE SCATAR,
             SW.SERVICECOMPONENTENABLED SWEN,
             SW.TARIFFCODE_PK SWTAR,
             SW.SPECIALAGREEMENTFACTOR SWSAF,
             SW.SPECIALAGREEMENTFLAG SWSAEX,
             SW.SRFCWATERAREADRAINED AREADRND,
             SW.SRFCWATERCOMMUNITYCONFLAG SWCCON,
             HD.SERVICECOMPONENTENABLED HDEN,
             HD.TARIFFCODE_PK HDTAR,
             HD.SPECIALAGREEMENTFACTOR HDSAF,
             HD.SPECIALAGREEMENTFLAG HDSAEX,
             HD.HWAYSURFACEAREA SAPROP,
             HD.HWAYCOMMUNITYCONFLAG HDCCON,
             0 TEEN
      FROM SAPTRAN.MO_SUPPLY_POINT MSP,
           SAPTRAN.MO_ELIGIBLE_PREMISES MEP,
           SAPTRAN.MO_SERVICE_COMPONENT MSC,
           SAPTRAN.MO_SERVICE_COMPONENT MS,
           SAPTRAN.MO_SERVICE_COMPONENT ASS,
           SAPTRAN.MO_SERVICE_COMPONENT US,
           SAPTRAN.MO_SERVICE_COMPONENT SW,
           SAPTRAN.MO_SERVICE_COMPONENT HD,
           SAPTRAN.MO_SERVICE_COMPONENT_VOL_ADJ ADJ
      WHERE MSP.STWPROPERTYNUMBER_PK = MEP.STWPROPERTYNUMBER_PK
      AND MSP.WHOLESALERID_PK = 'SEVERN-W'
      AND MSP.SERVICECATEGORY = 'S'
      AND MSP.SPID_PK = MSC.SPID_PK
      AND (MSP.SPID_PK = MS.SPID_PK(+) AND MS.SERVICECOMPONENTTYPE(+) = 'MS')
      AND (MSP.SPID_PK = ASS.SPID_PK(+) AND ASS.SERVICECOMPONENTTYPE(+) = 'AS')
      AND (MSP.SPID_PK = US.SPID_PK(+) AND US.SERVICECOMPONENTTYPE(+) = 'US')
      AND (MSP.SPID_PK = SW.SPID_PK(+) AND SW.SERVICECOMPONENTTYPE(+) = 'SW')
      AND (MSP.SPID_PK = HD.SPID_PK(+) AND HD.SERVICECOMPONENTTYPE(+) = 'HD')
      AND MSC.SERVICECOMPONENTREF_PK = ADJ.SERVICECOMPONENTREF_PK(+)
      UNION
      SELECT MDP.SPID_PK SPID,
             TO_CHAR(MDP.SCEFFECTIVEFROMDATE,'YYYY-MM-DD') EFD,
             NULL MSEN,
             NULL MSTAR,
             NULL MSSAF,
             NULL MSSAEX,
             NULL ASEN,
             NULL ASTAR,
             NULL ASSAF,
             NULL ASSAEX,
             NULL ASVRATE,
             NULL ASMS,
             NULL ASBAND,
             NULL USEN,
             NULL USTAR,
             NULL USSAF,
             NULL USSAEX,
             NULL USMISC_A,
             NULL USMISC_B,
             NULL USMISC_C,
             NULL USMISC_D,
             NULL USMISC_E,
             NULL USMISC_F,
             NULL USMISC_G,
             NULL USMISC_H,
             NULL PS,
             NULL SCAEN,
             NULL SCATAR,
             NULL SWEN,
             NULL SWTAR,
             NULL SWSAF,
             NULL SWSAEX,
             NULL AREADRND,
             NULL SWCCON,
             NULL HDEN,
             NULL HDTAR,
             NULL HDSAF,
             NULL HDSAEX,
             NULL SAPROP,
             NULL HDCCON,
             CASE WHEN MDP.SCEFFECTIVEFROMDATE <= SYSDATE
                THEN 1
                ElSE 0
            END AS TEEN
      FROM SAPTRAN.MO_DISCHARGE_POINT MDP,
           SAPTRAN.MO_ELIGIBLE_PREMISES MEP
      WHERE MDP.STWPROPERTYNUMBER_PK = MEP.STWPROPERTYNUMBER_PK
      AND MDP.WHOLESALERID = 'SEVERN-W')
    ORDER BY SPID;

-- SPID_METER
  CURSOR spid_meter_cur IS
    SELECT MSP.SPID_PK SPID,
           MSA.MANUFACTURER_PK MMANUF,
           MSA.MANUFACTURERSERIALNUM_PK MSERNO
    FROM SAPTRAN.MO_SUPPLY_POINT MSP,
         SAPTRAN.MO_ELIGIBLE_PREMISES MEP,
         SAPTRAN.MO_METER_SPID_ASSOC MSA
    WHERE MSP.STWPROPERTYNUMBER_PK = MEP.STWPROPERTYNUMBER_PK
    AND NOT (MSP.WHOLESALERID_PK <> 'SEVERN-W' AND MSP.SERVICECATEGORY = 'S')
    AND MSA.SPID = MSP.SPID_PK
    ORDER BY MSP.SPID_PK;

-- METER_INFO
  CURSOR meter_info_cur IS
    SELECT MSA.MANUFACTURER_PK MMANUF,
           MSA.MANUFACTURERSERIALNUM_PK MSERNO,
           MM.NUMBEROFDIGITS NODIG,
           MM.METERTREATMENT MTREATMENT,
           TO_CHAR(MR.INITIALMETERREADDATE,'YYYY-MM-DD') EFD,
--           TO_CHAR(MAX(MR.METERREADDATE),'YYYY-MM-DD') ETD  -- V 0.03
           '9999-12-31' ETD -- V 0.03
    FROM SAPTRAN.MO_SUPPLY_POINT MSP,
         SAPTRAN.MO_ELIGIBLE_PREMISES MEP,
         SAPTRAN.MO_METER_SPID_ASSOC MSA,
         SAPTRAN.MO_METER MM,
         SAPTRAN.MO_METER_READING MR
    WHERE MSP.STWPROPERTYNUMBER_PK = MEP.STWPROPERTYNUMBER_PK
    AND NOT (MSP.WHOLESALERID_PK <> 'SEVERN-W' AND MSP.SERVICECATEGORY = 'S')
    AND MSA.SPID = MSP.SPID_PK
    AND MM.MANUFACTURER_PK = MSA.MANUFACTURER_PK
    AND MM.MANUFACTURERSERIALNUM_PK = MSA.MANUFACTURERSERIALNUM_PK
    AND MM.METERREF = MR.METERREF
    GROUP BY MSA.MANUFACTURER_PK,MSA.MANUFACTURERSERIALNUM_PK,MM.NUMBEROFDIGITS,MM.METERTREATMENT,MR.INITIALMETERREADDATE
    ORDER BY MSA.MANUFACTURER_PK,MSA.MANUFACTURERSERIALNUM_PK;

-- METER_HIST
  CURSOR meter_hist_cur IS
    SELECT MSA.MANUFACTURER_PK MMANUF,
           MSA.MANUFACTURERSERIALNUM_PK MSERNO,
           TO_CHAR(MR.INITIALMETERREADDATE,'YYYY-MM-DD') EFD,
           MM.YEARLYVOLESTIMATE YVE,
           MM.WATERCHARGEMETERSIZE WCMS,
           MM.SEWCHARGEABLEMETERSIZE SCMS,
           NVL(MM.RETURNTOSEWER,100) RTS
    FROM SAPTRAN.MO_SUPPLY_POINT MSP,
         SAPTRAN.MO_ELIGIBLE_PREMISES MEP,
         SAPTRAN.MO_METER_SPID_ASSOC MSA,
         SAPTRAN.MO_METER MM,
         SAPTRAN.MO_METER_READING MR
    WHERE MSP.STWPROPERTYNUMBER_PK = MEP.STWPROPERTYNUMBER_PK
    AND NOT (MSP.WHOLESALERID_PK <> 'SEVERN-W' AND MSP.SERVICECATEGORY = 'S')
    AND MSA.SPID = MSP.SPID_PK
    AND MM.MANUFACTURER_PK = MSA.MANUFACTURER_PK
    AND MM.MANUFACTURERSERIALNUM_PK = MSA.MANUFACTURERSERIALNUM_PK
    AND MM.METERREF = MR.METERREF
    GROUP BY MSA.MANUFACTURER_PK,MSA.MANUFACTURERSERIALNUM_PK,MR.INITIALMETERREADDATE,MM.YEARLYVOLESTIMATE,MM.WATERCHARGEMETERSIZE,MM.SEWCHARGEABLEMETERSIZE,MM.RETURNTOSEWER
    ORDER BY MSA.MANUFACTURER_PK,MSA.MANUFACTURERSERIALNUM_PK;

-- METER_READS
  CURSOR meter_reads_cur IS
    SELECT MSA.MANUFACTURER_PK MMANUF,
           MSA.MANUFACTURERSERIALNUM_PK MSERNO,
           MR.METERREAD READV,
           TO_CHAR(MR.METERREADDATE,'YYYY-MM-DD') READD,
           MR.METERREADTYPE READT,
           MR.METERREADMETHOD READM,
           MR.ROLLOVERINDICATOR ROLLOVER
    FROM SAPTRAN.MO_SUPPLY_POINT MSP,
         SAPTRAN.MO_ELIGIBLE_PREMISES MEP,
         SAPTRAN.MO_METER_SPID_ASSOC MSA,
         SAPTRAN.MO_METER_READING MR
    WHERE MSP.STWPROPERTYNUMBER_PK = MEP.STWPROPERTYNUMBER_PK
    AND NOT (MSP.WHOLESALERID_PK <> 'SEVERN-W' AND MSP.SERVICECATEGORY = 'S')
    AND MSA.SPID = MSP.SPID_PK
    AND MR.MANUFACTURER_PK = MSA.MANUFACTURER_PK
    AND MR.MANUFACTURERSERIALNUM_PK = MSA.MANUFACTURERSERIALNUM_PK
    ORDER BY MSA.MANUFACTURER_PK,MSA.MANUFACTURERSERIALNUM_PK, MR.METERREADDATE;

-- MNET_ASSOC
  CURSOR mnet_assoc_cur IS
    SELECT DISTINCT
      MMANUF_MAIN,
      MSERNO_MAIN,
      MMANUF_SUB,
      MSERNO_SUB,
      TO_CHAR(EFD,'YYYY-MM-DD') EFD,
      CASE WHEN EFD <= SYSDATE
        THEN 1
        ElSE 0
      END AS MNASSOC
    FROM
      (SELECT MSA.MANUFACTURER_PK MMANUF_MAIN,
             MSA.MANUFACTURERSERIALNUM_PK MSERNO_MAIN,
             MAIN.SUB_MANUFACTURER_PK MMANUF_SUB,
             MAIN.SUB_MANSERIALNUM_PK MSERNO_SUB,
             GREATEST(MAIN_MR.INITIALMETERREADDATE,SUB_MR.INITIALMETERREADDATE) EFD
      FROM SAPTRAN.MO_SUPPLY_POINT MSP,
           SAPTRAN.MO_ELIGIBLE_PREMISES MEP,
           SAPTRAN.MO_METER_SPID_ASSOC MSA,
           SAPTRAN.MO_METER_NETWORK MAIN,
           SAPTRAN.MO_METER_READING MAIN_MR,
           SAPTRAN.MO_METER_READING SUB_MR
      WHERE MSP.STWPROPERTYNUMBER_PK = MEP.STWPROPERTYNUMBER_PK
      AND NOT (MSP.WHOLESALERID_PK <> 'SEVERN-W' AND MSP.SERVICECATEGORY = 'S')
      AND MSA.SPID = MSP.SPID_PK
      AND MSA.MANUFACTURER_PK = MAIN.MAIN_MANUFACTURER_PK
      AND MSA.MANUFACTURERSERIALNUM_PK = MAIN.MAIN_MANSERIALNUM_PK
      AND MAIN.MAIN_METERREF = MAIN_MR.METERREF
      AND MAIN.SUB_METERREF = SUB_MR.METERREF
      UNION
      SELECT SUB.MAIN_MANUFACTURER_PK MMANUF_MAIN,
             SUB.MAIN_MANSERIALNUM_PK MSERNO_MAIN,
             MSA.MANUFACTURER_PK MMANUF_SUB,
             MSA.MANUFACTURERSERIALNUM_PK MSERNO_SUB,
             GREATEST(MAIN_MR.INITIALMETERREADDATE,SUB_MR.INITIALMETERREADDATE) EFD
      FROM SAPTRAN.MO_SUPPLY_POINT MSP,
           SAPTRAN.MO_ELIGIBLE_PREMISES MEP,
           SAPTRAN.MO_METER_SPID_ASSOC MSA,
           SAPTRAN.MO_METER_NETWORK SUB,
           SAPTRAN.MO_METER_READING MAIN_MR,
           SAPTRAN.MO_METER_READING SUB_MR
      WHERE MSP.STWPROPERTYNUMBER_PK = MEP.STWPROPERTYNUMBER_PK
      AND NOT (MSP.WHOLESALERID_PK <> 'SEVERN-W' AND MSP.SERVICECATEGORY = 'S')
      AND MSA.SPID = MSP.SPID_PK
      AND MSA.MANUFACTURER_PK = SUB.SUB_MANUFACTURER_PK
      AND MSA.MANUFACTURERSERIALNUM_PK = SUB.SUB_MANSERIALNUM_PK
      AND SUB.MAIN_METERREF = MAIN_MR.METERREF
      AND SUB.SUB_METERREF = SUB_MR.METERREF)
    ORDER BY MMANUF_MAIN,MSERNO_MAIN;

-- SPID_DPID
  CURSOR spid_dpid_cur IS
    SELECT SPID_PK SPID,
           DPID_PK DPID,
           TO_CHAR(DPEFFECTFROMDATE,'YYYY-MM-DD') EFD,
           TO_CHAR(DPEFFECTTODATE,'YYYY-MM-DD') ETD
    FROM SAPTRAN.MO_DISCHARGE_POINT;

-- DPID_HIST
  CURSOR dpid_hist_cur IS
    SELECT DPID_PK DPID,
           TO_CHAR(DPEFFECTFROMDATE,'YYYY-MM-DD') EFD,
           DPIDSPECIALAGREEMENTFACTOR DPSAF,
           DPIDSPECIALAGREEMENTINPLACE DPSAEX,
           AMMONIANITROCAL CANDL,
           CHARGEABLEDAILYVOL CDV,
           CHEMICALOXYGENDEMAND CCODL,
           SUSPENDEDSOLIDSLOAD CSSL,
           TREFODCHEMOXYGENDEMAND OT,
           TREFODCHEMSUSPSOLDEMAND ST,
           DOMMESTICALLOWANCE DA,
           SEASONALFACTOR SF,
           TREFODCHEMAMONIANITROGENDEMAND ATD,
           PERCENTAGEALLOWANCE PA,
           FIXEDALLOWANCE FA,
           RECEPTIONTREATMENTINDICATOR RTI,
           PRIMARYTREATMENTINDICATOR PTI,
           MARINETREATMENTINDICATOR MTI,
           BIOLOGICALTREATMENTINDICATOR BTI,
           SLUDGETREATMENTINDICATOR STI,
           AMMONIATREATMENTINDICATOR ATI,
           TARRIFCODE TETAR,
           TARRIFBAND TEBAND,
           TREFODCHEMCOMPXDEMAND XT,
           TREFODCHEMCOMPYDEMAND YT,
           TREFODCHEMCOMPZDEMAND ZT,
           TEFXTREATMENTINDICATOR XTI,
           TEFYTREATMENTINDICATOR YTI,
           TEFZTREATMENTINDICATOR ZTI,
           TEFAVAILABILITYDATAX XDL,
           TEFAVAILABILITYDATAY YDL,
           TEFAVAILABILITYDATAZ ZDL,
           SEWERAGEVOLUMEADJMENTHOD SVAM
    FROM SAPTRAN.MO_DISCHARGE_POINT;

-- MDPID_ASSOC
  CURSOR mdpid_assoc_cur IS
    SELECT XRF.MANUFACTURER_PK MMANUF,
           XRF.MANUFACTURERSERIALNUM_PK MSERNO,
           MDP.DPID_PK DPID,
           TO_CHAR(MDP.DPEFFECTFROMDATE,'YYYY-MM-DD') EFD,
           CASE WHEN MDP.DPEFFECTFROMDATE <= SYSDATE
             THEN 1
             ElSE 0
           END AS MDASSOC,
           XRF.PERCENTAGEDISCHARGE MDVOL
    FROM SAPTRAN.MO_DISCHARGE_POINT MDP,
         SAPTRAN.MO_METER_DPIDXREF XRF
    WHERE MDP.DPID_PK = XRF.DPID_PK
    ORDER BY MDP.DPID_PK;

-- DISCH
  CURSOR disch_cur IS
    SELECT MCD.DPID_PK DPID,
           TO_CHAR(MCD.EFFECTFROMDATE,'YYYY-MM-DD') EFD,
           MCD.TEYEARLYVOLESTIMATE YVE,
           MCD.CALCDISCHARGEID_PK CDCHID
    FROM SAPTRAN.MO_DISCHARGE_POINT MDP,
         SAPTRAN.MO_CALCULATED_DISCHARGE MCD
    WHERE MDP.DPID_PK = MCD.DPID_PK;

-- DCHVL
  CURSOR dchvl_cur IS
    SELECT MCD.DPID_PK DPID,
           TO_CHAR(MCD.EFFECTFROMDATE,'YYYY-MM-DD') EFD,
           TO_CHAR(MCD.EFFECTTODATE,'YYYY-MM-DD') ETD,
           ADJ.ADJUSTMENTSVOLUME CDCHV,
           MCD.CALCDISCHARGEID_PK CDCHID
    FROM SAPTRAN.MO_DISCHARGE_POINT MDP,
         SAPTRAN.MO_CALCULATED_DISCHARGE MCD,
         SAPTRAN.MO_DISCHARGE_POINT_VOLMET_ADJ ADJ
    WHERE MDP.DPID_PK = MCD.DPID_PK
    AND MCD.DPID_PK = ADJ.DPID_PK(+);
BEGIN
  -- create SPID CSV file
  l_timestamp := TO_CHAR(SYSDATE,'YYMMDDHH24MI');
  l_filename := 'MPDS_SPID_' || l_timestamp || '.csv';
  l_filehandle := UTL_FILE.FOPEN(l_filepath, l_filename, 'A');

  UTL_FILE.PUT_LINE(l_filehandle, 'SPID,CONNDATE'); -- header
  FOR t IN spid_cur
  LOOP
    l_text := t.SPID || ',' || t.CONNDATE;
    UTL_FILE.PUT_LINE(l_filehandle, l_text);
  END LOOP;

  UTL_FILE.FCLOSE(l_filehandle);

  -- create SPID_REG CSV file
  l_timestamp := TO_CHAR(SYSDATE,'YYMMDDHH24MI');
  l_filename := 'MPDS_SPID_REG_' || l_timestamp || '.csv';
  l_filehandle := UTL_FILE.FOPEN(l_filepath, l_filename, 'A');

  UTL_FILE.PUT_LINE(l_filehandle, 'SPID,REGD,WID,RID'); -- header
  FOR t IN spid_reg_cur
  LOOP
    l_text := t.SPID || ',' || t.REGD || ',' || t.WID || ',' || t.RID;
    UTL_FILE.PUT_LINE(l_filehandle, l_text);
  END LOOP;

  UTL_FILE.FCLOSE(l_filehandle);

  -- create SPID_HIST CSV file
  l_timestamp := TO_CHAR(SYSDATE,'YYMMDDHH24MI');
  l_filename := 'MPDS_SPID_HIST_' || l_timestamp || '.csv';
  l_filehandle := UTL_FILE.FOPEN(l_filepath, l_filename, 'A');

  UTL_FILE.PUT_LINE(l_filehandle, 'SPID,EFD,STATUS,RV,VAC,SEC154A,VOLTRANSFER'); -- header
  FOR t IN spid_hist_cur
  LOOP
    l_text := t.SPID || ',' || t.EFD || ',' || t.STATUS || ',' || t.RV || ',' || t.VAC || ',' || t.SEC154A || ',' || t.VOLTRANSFER;
    UTL_FILE.PUT_LINE(l_filehandle, l_text);
  END LOOP;

  UTL_FILE.FCLOSE(l_filehandle);

  -- create WSC_HIST CSV file
  l_timestamp := TO_CHAR(SYSDATE,'YYMMDDHH24MI');
  l_filename := 'MPDS_WSC_HIST_' || l_timestamp || '.csv';
  l_filehandle := UTL_FILE.FOPEN(l_filepath, l_filename, 'A');

  UTL_FILE.PUT_LINE(l_filehandle, 'SPID,EFD,MWEN_P,MWTAR_P,MWSAF_P,MWSAEX_P,MWMDD_P,MWDCAP_P,MWEN_NP,MWTAR_NP,MWSAF_NP,MWSAEX_NP,MWMDD_NP,MWDCAP_NP,AWEN,AWTAR,AWSAF,AWSAEX,AWVRATE,AWMS,AWBAND,UWEN,UWTAR,UWSAF,UWSAEX,UWMISC_A,UWMISC_B,UWMISC_C,UWMISC_D,UWMISC_E,UWMISC_F,UWMISC_G,UWMISC_H,PS,WCAEN,WCATAR'); -- header
  FOR t IN wsc_hist_cur
  LOOP
    l_text := t.SPID || ',' || t.EFD || ',' || t.MWEN_P || ',' || t.MWTAR_P || ',' || t.MWSAF_P || ',' || t.MWSAEX_P || ',' || t.MWMDD_P || ',' || t.MWDCAP_P || ',' || t.MWEN_NP || ',' || t.MWTAR_NP || ',' || t.MWSAF_NP || ',' || t.MWSAEX_NP || ',' || t.MWMDD_NP || ',' || t.MWDCAP_NP || ',' || t.AWEN || ',' || t.AWTAR || ',' || t.AWSAF || ',' || t.AWSAEX || ',' || t.AWVRATE || ',' || t.AWMS || ',' || t.AWBAND || ',' || t.UWEN || ',' || t.UWTAR || ',' || t.UWSAF || ',' || t.UWSAEX || ',' || t.UWMISC_A || ',' || t.UWMISC_B || ',' || t.UWMISC_C || ',' || t.UWMISC_D || ',' || t.UWMISC_E || ',' || t.UWMISC_F || ',' || t.UWMISC_G || ',' || t.UWMISC_H || ',' || t.PS || ',' || t.WCAEN || ',' || t.WCATAR;
    UTL_FILE.PUT_LINE(l_filehandle, l_text);
  END LOOP;

  UTL_FILE.FCLOSE(l_filehandle);

  -- create SSC_HIST CSV file
  l_timestamp := TO_CHAR(SYSDATE,'YYMMDDHH24MI');
  l_filename := 'MPDS_SSC_HIST_' || l_timestamp || '.csv';
  l_filehandle := UTL_FILE.FOPEN(l_filepath, l_filename, 'A');

  UTL_FILE.PUT_LINE(l_filehandle, 'SPID,EFD,MSEN,MSTAR,MSSAF,MSSAEX,ASEN,ASTAR,ASSAF,ASSAEX,ASVRATE,ASMS,ASBAND,USEN,USTAR,USSAF,USSAEX,USMISC_A,USMISC_B,USMISC_C,USMISC_D,USMISC_E,USMISC_F,USMISC_G,USMISC_H,PS,SCAEN,SCATAR,SWEN,SWTAR,SWSAF,SWSAEX,AREADRND,SWCCON,HDEN,HDTAR,HDSAF,HDSAEX,SAPROP,HDCCON,TEEN'); -- header
  FOR t IN ssc_hist_cur
  LOOP
    l_text := t.SPID || ',' || t.EFD || ',' || t.MSEN || ',' || t.MSTAR || ',' || t.MSSAF || ',' || t.MSSAEX || ',' || t.ASEN || ',' || t.ASTAR || ',' || t.ASSAF || ',' || t.ASSAEX || ',' || t.ASVRATE || ',' || t.ASMS || ',' || t.ASBAND || ',' || t.USEN || ',' || t.USTAR || ',' || t.USSAF || ',' || t.USSAEX || ',' || t.USMISC_A || ',' || t.USMISC_B || ',' || t.USMISC_C || ',' || t.USMISC_D || ',' || t.USMISC_E || ',' || t.USMISC_F || ',' || t.USMISC_G || ',' || t.USMISC_H || ',' || t.PS || ',' || t.SCAEN || ',' || t.SCATAR || ',' || t.SWEN || ',' || t.SWTAR || ',' || t.SWSAF || ',' || t.SWSAEX || ',' || t.AREADRND || ',' || t.SWCCON || ',' || t.HDEN || ',' || t.HDTAR || ',' || t.HDSAF || ',' || t.HDSAEX || ',' || t.SAPROP || ',' || t.HDCCON || ',' || t.TEEN;
    UTL_FILE.PUT_LINE(l_filehandle, l_text);
  END LOOP;

  UTL_FILE.FCLOSE(l_filehandle);

  -- create SPID_METER CSV file
  l_timestamp := TO_CHAR(SYSDATE,'YYMMDDHH24MI');
  l_filename := 'MPDS_SPID_METER_' || l_timestamp || '.csv';
  l_filehandle := UTL_FILE.FOPEN(l_filepath, l_filename, 'A');

  UTL_FILE.PUT_LINE(l_filehandle, 'SPID,MMANUF,MSERNO'); -- header
  FOR t IN spid_meter_cur
  LOOP
    l_text := t.SPID || ',' || t.MMANUF || ',' || t.MSERNO;
    UTL_FILE.PUT_LINE(l_filehandle, l_text);
  END LOOP;

  UTL_FILE.FCLOSE(l_filehandle);

  -- create METER_INFO CSV file
  l_timestamp := TO_CHAR(SYSDATE,'YYMMDDHH24MI');
  l_filename := 'MPDS_METER_INFO_' || l_timestamp || '.csv';
  l_filehandle := UTL_FILE.FOPEN(l_filepath, l_filename, 'A');

  UTL_FILE.PUT_LINE(l_filehandle, 'MMANUF,MSERNO,NODIG,MTREATMENT,EFD,ETD'); -- header
  FOR t IN meter_info_cur
  LOOP
    l_text := t.MMANUF || ',' || t.MSERNO || ',' || t.NODIG || ',' || t.MTREATMENT || ',' || t.EFD || ',' || t.ETD;
    UTL_FILE.PUT_LINE(l_filehandle, l_text);
  END LOOP;

  UTL_FILE.FCLOSE(l_filehandle);

  -- create METER_HIST CSV file
  l_timestamp := TO_CHAR(SYSDATE,'YYMMDDHH24MI');
  l_filename := 'MPDS_METER_HIST_' || l_timestamp || '.csv';
  l_filehandle := UTL_FILE.FOPEN(l_filepath, l_filename, 'A');

  UTL_FILE.PUT_LINE(l_filehandle, 'MMANUF,MSERNO,EFD,YVE,WCMS,SCMS,RTS'); -- header
  FOR t IN meter_hist_cur
  LOOP
    l_text := t.MMANUF || ',' || t.MSERNO || ',' || t.EFD || ',' || t.YVE || ',' || t.WCMS || ',' || t.SCMS || ',' || t.RTS;
    UTL_FILE.PUT_LINE(l_filehandle, l_text);
  END LOOP;

  UTL_FILE.FCLOSE(l_filehandle);

  -- create METER_READS CSV file
  l_timestamp := TO_CHAR(SYSDATE,'YYMMDDHH24MI');
  l_filename := 'MPDS_METER_READS_' || l_timestamp || '.csv';
  l_filehandle := UTL_FILE.FOPEN(l_filepath, l_filename, 'A');

  UTL_FILE.PUT_LINE(l_filehandle, 'MMANUF,MSERNO,READV,READD,READT,READM,ROLLOVER'); -- header
  FOR t IN meter_reads_cur
  LOOP
    l_text := t.MMANUF || ',' || t.MSERNO || ',' || t.READV || ',' || t.READD || ',' || t.READT || ',' || t.READM || ',' || t.ROLLOVER;
    UTL_FILE.PUT_LINE(l_filehandle, l_text);
  END LOOP;

  UTL_FILE.FCLOSE(l_filehandle);

  -- create MNET_ASSOC CSV file
  l_timestamp := TO_CHAR(SYSDATE,'YYMMDDHH24MI');
  l_filename := 'MPDS_MNET_ASSOC_' || l_timestamp || '.csv';
  l_filehandle := UTL_FILE.FOPEN(l_filepath, l_filename, 'A');

  UTL_FILE.PUT_LINE(l_filehandle, 'MMANUF_MAIN,MSERNO_MAIN,MMANUF_SUB,MSERNO_SUB,EFD,MNASSOC'); -- header
  FOR t IN mnet_assoc_cur
  LOOP
    l_text := t.MMANUF_MAIN || ',' || t.MSERNO_MAIN || ',' || t.MMANUF_SUB || ',' || t.MSERNO_SUB || ',' || t.EFD || ',' || t.MNASSOC;
    UTL_FILE.PUT_LINE(l_filehandle, l_text);
  END LOOP;

  UTL_FILE.FCLOSE(l_filehandle);

  -- create SPID_DPID CSV file
  l_timestamp := TO_CHAR(SYSDATE,'YYMMDDHH24MI');
  l_filename := 'MPDS_SPID_DPID_' || l_timestamp || '.csv';
  l_filehandle := UTL_FILE.FOPEN(l_filepath, l_filename, 'A');

  UTL_FILE.PUT_LINE(l_filehandle, 'SPID,DPID,EFD,ETD'); -- header
  FOR t IN spid_dpid_cur
  LOOP
    l_text := t.SPID || ',' || t.DPID || ',' || t.EFD || ',' || t.ETD;
    UTL_FILE.PUT_LINE(l_filehandle, l_text);
  END LOOP;

  UTL_FILE.FCLOSE(l_filehandle);

  -- create DPID_HIST CSV file
  l_timestamp := TO_CHAR(SYSDATE,'YYMMDDHH24MI');
  l_filename := 'MPDS_DPID_HIST_' || l_timestamp || '.csv';
  l_filehandle := UTL_FILE.FOPEN(l_filepath, l_filename, 'A');

  UTL_FILE.PUT_LINE(l_filehandle, 'DPID,EFD,DPSAF,DPSAEX,CANDL,CDV,CCODL,CSSL,OT,ST,DA,SF,AT,PA,FA,RTI,PTI,MTI,BTI,STI,ATI,TETAR,TEBAND,XT,YT,ZT,XTI,YTI,ZTI,XDL,YDL,ZDL,SVAM'); -- header
  FOR t IN dpid_hist_cur
  LOOP
    l_text := t.DPID || ',' || t.EFD || ',' || t.DPSAF || ',' || t.DPSAEX || ',' || t.CANDL || ',' || t.CDV || ',' || t.CCODL || ',' || t.CSSL || ',' || t.OT || ',' || t.ST || ',' || t.DA || ',' || t.SF || ',' || t.ATD || ',' || t.PA || ',' || t.FA || ',' || t.RTI || ',' || t.PTI || ',' || t.MTI || ',' || t.BTI || ',' || t.STI || ',' || t.ATI || ',' || t.TETAR || ',' || t.TEBAND || ',' || t.XT || ',' || t.YT || ',' || t.ZT || ',' || t.XTI || ',' || t.YTI || ',' || t.ZTI || ',' || t.XDL || ',' || t.YDL || ',' || t.ZDL || ',' || t.SVAM;
    UTL_FILE.PUT_LINE(l_filehandle, l_text);
  END LOOP;

  UTL_FILE.FCLOSE(l_filehandle);

  -- create MDPID_ASSOC CSV file
  l_timestamp := TO_CHAR(SYSDATE,'YYMMDDHH24MI');
  l_filename := 'MPDS_MDPID_ASSOC_' || l_timestamp || '.csv';
  l_filehandle := UTL_FILE.FOPEN(l_filepath, l_filename, 'A');

  UTL_FILE.PUT_LINE(l_filehandle, 'MMANUF,MSERNO,DPID,EFD,MDASSOC,MDVOL'); -- header
  FOR t IN mdpid_assoc_cur
  LOOP
    l_text := t.MMANUF || ',' || t.MSERNO || ',' || t.DPID || ',' || t.EFD || ',' || t.MDASSOC || ',' || t.MDVOL;
    UTL_FILE.PUT_LINE(l_filehandle, l_text);
  END LOOP;

  UTL_FILE.FCLOSE(l_filehandle);

  -- create DISCH CSV file
  l_timestamp := TO_CHAR(SYSDATE,'YYMMDDHH24MI');
  l_filename := 'MPDS_DISCH_' || l_timestamp || '.csv';
  l_filehandle := UTL_FILE.FOPEN(l_filepath, l_filename, 'A');

  UTL_FILE.PUT_LINE(l_filehandle, 'DPID,EFD,YVE,CDCHID'); -- header
  FOR t IN disch_cur
  LOOP
    l_text := t.DPID || ',' || t.EFD || ',' || t.YVE || ',' || t.CDCHID;
    UTL_FILE.PUT_LINE(l_filehandle, l_text);
  END LOOP;

  UTL_FILE.FCLOSE(l_filehandle);

  -- create DCHVL CSV file
  l_timestamp := TO_CHAR(SYSDATE,'YYMMDDHH24MI');
  l_filename := 'MPDS_DCHVL_' || l_timestamp || '.csv';
  l_filehandle := UTL_FILE.FOPEN(l_filepath, l_filename, 'A');

  UTL_FILE.PUT_LINE(l_filehandle, 'DPID,EFD,ETD,CDCHV,CDCHID'); -- header
  FOR t IN dchvl_cur
  LOOP
    l_text := t.DPID || ',' || t.EFD || ',' || t.ETD || ',' || t.CDCHV || ',' || t.CDCHID;
    UTL_FILE.PUT_LINE(l_filehandle, l_text);
  END LOOP;

  UTL_FILE.FCLOSE(l_filehandle);
END P_SAP_DEL_UTIL_MPDS;
/
exit;