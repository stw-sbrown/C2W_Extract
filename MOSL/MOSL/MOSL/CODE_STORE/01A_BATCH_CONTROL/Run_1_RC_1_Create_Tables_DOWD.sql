--
-- RC_1_Create_tables.sql
-- Create control tables for Reception area
-- Date - 15/02/2015
-- Written By - Surinder Badhan
--

---------------------------------------------------------------------------------------
-- Version     Date        Author     Description
-- ---------   ----------  --------   --------------------------------------------------
-- V 1.01      12/04/2016  S.Badhan   Update of MIG_V_BATCHSTATUS to uses dates from
--                                    MIG_JOBSTATUS table.
-- V 1.00      15/02/2016  S.Badhan   Intial
----------------------------------------------------------------------------------------


-- 1. Batch Table

DROP TABLE MIG_BATCHSTATUS PURGE;
DROP PUBLIC SYNONYM MIG_BATCHSTATUS;

CREATE TABLE MIG_BATCHSTATUS
(	NO_BATCH            NUMBER(4)     NOT NULL,
	TS_START            TIMESTAMP     NOT NULL,
  DT_PROCESS          DATE          NOT NULL,
  TS_UPDATE           TIMESTAMP     NOT NULL,
  BATCH_STATUS        VARCHAR2(3)   NOT NULL,
 	CONSTRAINT MIG_PK_BATCHSTATUS PRIMARY KEY (NO_BATCH, TS_START)   USING INDEX
) ;

COMMENT ON TABLE MIG_BATCHSTATUS  IS 'MIG_BATCHSTATUS';
CREATE PUBLIC SYNONYM MIG_BATCHSTATUS FOR MIG_BATCHSTATUS;

GRANT SELECT, INSERT, UPDATE, DELETE ON MIG_BATCHSTATUS TO MOUDEL;
GRANT SELECT ON MIG_BATCHSTATUS TO RECEPTION ;


-- 2. Job Table

DROP TABLE MIG_JOBREF PURGE;
DROP PUBLIC SYNONYM MIG_JOBREF;

CREATE TABLE MIG_JOBREF
(	NO_JOB              NUMBER(4)     NOT NULL,
	NM_PROCESS          VARCHAR2(30)  NOT NULL,
  ERR_TOLERANCE       NUMBER(5)  DEFAULT 0 NOT NULL, 
  EXP_TOLERANCE       NUMBER(5)  DEFAULT 0 NOT NULL, 
  WAR_TOLERANCE       NUMBER(5)  DEFAULT 100 NOT NULL, 
  NO_COMMIT           NUMBER(6)  DEFAULT 999999 NOT NULL, 
  NO_STREAM           NUMBER(3)  DEFAULT 50 NOT NULL, 
  NO_RANGE_MIN        NUMBER(9)  DEFAULT 1 NOT NULL,   
  NO_RANGE_MAX        NUMBER(9)  DEFAULT 999999999 NOT NULL,   
	CONSTRAINT MIG_PK_JOBREF PRIMARY KEY (NO_JOB)   USING INDEX
) ;

COMMENT ON TABLE MIG_JOBREF  IS 'MIG_JOBREF';

CREATE PUBLIC SYNONYM MIG_JOBREF FOR MIG_JOBREF;

GRANT SELECT, INSERT, UPDATE, DELETE ON MIG_JOBREF TO MOUDEL;
GRANT SELECT ON MIG_JOBREF TO RECEPTION;

DROP TABLE MIG_JOBSTATUS  PURGE;
DROP PUBLIC SYNONYM MIG_JOBSTATUS;

CREATE TABLE MIG_JOBSTATUS
(	NO_BATCH            NUMBER(4)     NOT NULL,
  NO_INSTANCE         NUMBER(4)     NOT NULL,
	TS_START            TIMESTAMP     NOT NULL,
  DT_PROCESS          DATE          NOT NULL,
  TS_UPDATE           TIMESTAMP     NOT NULL,
  IND_STATUS          VARCHAR2(3)   NOT NULL,
  TXT_ARG             VARCHAR2(60)  NOT NULL,
  ERR_TOLERANCE       NUMBER(5)     NOT NULL,
  EXP_TOLERANCE       NUMBER(5)     NOT NULL,
  WAR_TOLERANCE       NUMBER(5)     NOT NULL,
  NO_COMMIT           NUMBER(6),
  NO_STREAM           NUMBER(3)     NOT NULL,
  NO_RANGE_MIN        NUMBER(9),
  NO_RANGE_MAX        NUMBER(9),  
	CONSTRAINT MIG_PK_JOBSTATUS PRIMARY KEY (NO_BATCH,  NO_INSTANCE, TS_START)   USING INDEX
) ;

COMMENT ON TABLE MIG_JOBSTATUS  IS 'MIG_JOBSTATUS';

CREATE PUBLIC SYNONYM MIG_JOBSTATUS FOR MIG_JOBSTATUS;

GRANT SELECT, INSERT, UPDATE, DELETE ON MIG_JOBSTATUS TO MOUDEL;
GRANT SELECT ON MIG_JOBSTATUS TO RECEPTION;


-- VIEW 

DROP VIEW MIG_V_BATCHSTATUS;
DROP PUBLIC SYNONYM MIG_V_BATCHSTATUS;

 CREATE OR REPLACE VIEW MIG_V_BATCHSTATUS AS
  SELECT bs.NO_BATCH, st.TS_START, st.DT_PROCESS, st.TS_UPDATE, st.IND_STATUS,
         jb.NM_PROCESS
  FROM   MIG_BATCHSTATUS bs,
         MIG_JOBREF jb,
         MIG_JOBSTATUS st
  WHERE  st.NO_BATCH =  bs.NO_BATCH
  AND    bs.BATCH_STATUS = 'RUN'
  AND    st.NO_INSTANCE BETWEEN NO_JOB AND (NO_JOB + 50);
  
COMMENT ON TABLE MIG_V_BATCHSTATUS  IS 'RC - JOB PROCESSING';

CREATE PUBLIC SYNONYM MIG_V_BATCHSTATUS FOR MIG_V_BATCHSTATUS;

GRANT SELECT ON MIG_V_BATCHSTATUS TO MOUDEL, RECEPTION;


--2. Error tables 

DROP TABLE MIG_ERRORLOG  PURGE;
DROP PUBLIC SYNONYM MIG_ERRORLOG;

CREATE TABLE MIG_ERRORLOG
(	NO_BATCH            NUMBER(4)     NOT NULL,
  NO_INSTANCE         NUMBER(4)     NOT NULL,
	TS_CREATED          TIMESTAMP     NOT NULL,
  NO_SEQ              NUMBER(5)     NOT NULL,
  IND_LOG             VARCHAR2(1)   NOT NULL,
  NO_ERR              NUMBER(3)     NOT NULL,
  TXT_KEY             VARCHAR2(30)  NOT NULL,
  TXT_DATA            VARCHAR2(100),
  CONSTRAINT MIG_PK_ERRORLOG UNIQUE (NO_BATCH, NO_INSTANCE, TS_CREATED, NO_SEQ)   USING INDEX
) ;

COMMENT ON TABLE MIG_ERRORLOG  IS 'MIG_ERRORLOG';

CREATE PUBLIC SYNONYM MIG_ERRORLOG FOR MIG_ERRORLOG;

GRANT SELECT ON MIG_ERRORLOG TO RECEPTION;
GRANT INSERT, UPDATE, DELETE ON MIG_ERRORLOG TO MOUDEL;


DROP TABLE MIG_ERRREF  PURGE;
DROP PUBLIC SYNONYM MIG_ERRREF;

CREATE TABLE MIG_ERRREF
(	IND_LOG            VARCHAR2(1)   NOT NULL,
  NO_ERR             NUMBER(3)     NOT NULL,
  TXT_ERR            VARCHAR2(100) NOT NULL,
  CONSTRAINT MIG_PK_ERRREF UNIQUE (IND_LOG, NO_ERR)   USING INDEX
) ;

COMMENT ON TABLE MIG_ERRREF  IS 'MIG_ERRREF';

CREATE PUBLIC SYNONYM MIG_ERRREF FOR MIG_ERRREF;

GRANT SELECT ON MIG_ERRREF TO RECEPTION;
GRANT INSERT, UPDATE, DELETE ON MIG_ERRREF TO MOUDEL ;

DROP VIEW MIG_V_ERRLOG;
DROP PUBLIC SYNONYM MIG_V_ERRLOG
;
 CREATE OR REPLACE VIEW MIG_V_ERRLOG AS 
  SELECT lg.*,
         er.TXT_ERR
  FROM   MIG_ERRORLOG lg,
         MIG_ERRREF er
  WHERE  lg.NO_ERR  = er.NO_ERR;

COMMENT ON TABLE MIG_V_ERRLOG  IS 'MIG_V_ERRLOG';

CREATE PUBLIC SYNONYM MIG_V_ERRLOG FOR MIG_V_ERRLOG;

GRANT SELECT ON MIG_V_ERRLOG TO MOUDEL, RECEPTION;

--3. Control tables 

DROP TABLE MIG_CPLOG PURGE;
DROP PUBLIC SYNONYM MIG_CPLOG;

CREATE TABLE MIG_CPLOG
(	NO_BATCH              NUMBER(4)     NOT NULL,
  NO_INSTANCE           NUMBER(4)     NOT NULL,
	TS_CREATED            TIMESTAMP     NOT NULL,
  NO_RECON_CP           NUMBER(5)     NOT NULL,
  RECON_MEASURE_TOTAL   NUMBER(6)     NOT NULL,
  CONSTRAINT MIG_PK_CPLOG UNIQUE (NO_BATCH, NO_INSTANCE, TS_CREATED, NO_RECON_CP)   USING INDEX
) ;

COMMENT ON TABLE MIG_CPLOG  IS 'MIG_CPLOG';

CREATE PUBLIC SYNONYM MIG_CPLOG FOR MIG_CPLOG;

GRANT SELECT ON MIG_CPLOG TO RECEPTION;
GRANT INSERT, UPDATE, DELETE ON MIG_CPLOG TO MOUDEL;


DROP TABLE MIG_CPREF PURGE;
DROP PUBLIC SYNONYM MIG_CPREF;

CREATE TABLE MIG_CPREF
(	NO_RECON_CP           NUMBER(5)     NOT NULL,
  RECON_CONTROL_POINT   VARCHAR2(6)   NOT NULL,
  RECON_MEASURE         NUMBER(4)     NOT NULL,
  RECON_MEASURE_DESC    VARCHAR2(100) NOT NULL,
  CONSTRAINT MIG_PK_CPREF UNIQUE (NO_RECON_CP)   USING INDEX
) ;

COMMENT ON TABLE MIG_CPREF  IS 'MIG_CPREF';

CREATE PUBLIC SYNONYM MIG_CPREF FOR MIG_CPREF;

GRANT SELECT ON MIG_CPLOG TO RECEPTION;
GRANT INSERT, UPDATE, DELETE ON MIG_CPLOG TO MOUDEL;

--

INSERT INTO MIG_CPREF
(NO_RECON_CP, RECON_CONTROL_POINT, RECON_MEASURE, RECON_MEASURE_DESC)
VALUES
(1, 'CP22', 610, 'Distinct Eligible Properties read during Transform');

INSERT INTO MIG_CPREF
(NO_RECON_CP, RECON_CONTROL_POINT, RECON_MEASURE, RECON_MEASURE_DESC)
VALUES
(2, 'CP22', 620, 'Eligible Properties dropped during Transform');

INSERT INTO MIG_CPREF
(NO_RECON_CP, RECON_CONTROL_POINT, RECON_MEASURE, RECON_MEASURE_DESC)
VALUES
(3, 'CP22', 630, 'Eligible Properties written to MO_ ELIGIBLE _PREMISE during Transform');

/*
INSERT INTO MIG_CPREF
(NO_RECON_CP, RECON_CONTROL_POINT, RECON_MEASURE, RECON_MEASURE_DESC)
VALUES
(1, 'CP1', 1, 'Property Records Read');

INSERT INTO MIG_CPREF
(NO_RECON_CP, RECON_CONTROL_POINT, RECON_MEASURE, RECON_MEASURE_DESC)
VALUES
(2, 'CP1', 2, 'Property Records Written');

INSERT INTO MIG_CPREF
(NO_RECON_CP, RECON_CONTROL_POINT, RECON_MEASURE, RECON_MEASURE_DESC)
VALUES
(3, 'CP1', 3, 'Property Records Dropped');

INSERT INTO MIG_CPREF
(NO_RECON_CP, RECON_CONTROL_POINT, RECON_MEASURE, RECON_MEASURE_DESC)
VALUES
(4, 'CP2', 1, 'Supply Point Records Read');

INSERT INTO MIG_CPREF
(NO_RECON_CP, RECON_CONTROL_POINT, RECON_MEASURE, RECON_MEASURE_DESC)
VALUES
(5, 'CP2', 2, 'Supply Point Records Updated');

INSERT INTO MIG_CPREF
(NO_RECON_CP, RECON_CONTROL_POINT, RECON_MEASURE, RECON_MEASURE_DESC)
VALUES
(6, 'CP2', 3, 'Supply Point Records Dropped');
*/


INSERT INTO MIG_JOBREF
(NO_JOB, NM_PROCESS)
VALUES
(100, 'P_MOU_TRAN_KEY_GEN');

INSERT INTO MIG_JOBREF
(NO_JOB, NM_PROCESS)
VALUES
(200, 'P_MOU_TRAN_PROPERTY');

INSERT INTO MIG_JOBREF
(NO_JOB, NM_PROCESS)
VALUES
(300, 'P_MOU_TRAN_SUPPLY_POINT');

INSERT INTO MIG_JOBREF
(NO_JOB, NM_PROCESS)
VALUES
(400, 'P_MOU_TRAN_SERVICE_COMPONENT');
